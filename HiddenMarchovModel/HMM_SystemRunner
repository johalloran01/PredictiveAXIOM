import numpy as np
from collections import Counter
from ModelConfig import ModelConfig
from DataLoader import DataLoader
from TimeBinner import TimeBinner
from RoomTransitionHMM import RoomTransitionHMM
from PredictionEvaluator import PredictionEvaluator

class RoomAnalysis:
    def __init__(self):
        self.room_counts = {}

    def analyze_room_data(self, raw_data):

        if 'Location' not in raw_data.columns:
            raise ValueError("Expected column 'Location' not found in data.")

         # Extract room codes from the 'Location' column directly
        room_codes = raw_data['Location'].dropna()
        
        # Convert to list if necessary, and count occurrences
        self.room_counts = Counter(room_codes) 

    def print_summary(self):
        print("\nRoom Code Analysis Summary")
        print("--------------------------")
        for room_code, count in self.room_counts.items():
            print(f"Room Code: {room_code}, Count: {count}")
        print("--------------------------")
        print(f"Total distinct room codes: {len(self.room_counts)}\n")

def main():
    config = ModelConfig(num_states=5, bin_size=15, random_state=42, n_iter=100, test_size=0.2)
    config.display_config()

    data_loader = DataLoader()
    file_path = "/home/josh/PredictiveAXIOM/HiddenMarchovModel/CSV_Data/original_data.csv"
    raw_data = data_loader.load_data(file_path)
    
    room_analysis = RoomAnalysis()
    room_analysis.analyze_room_data(raw_data)
    room_analysis.print_summary()

    time_binner = TimeBinner(bin_size=config.bin_size)
    processed_data, sequence_lengths = data_loader.format_data(time_binner, bin_size=config.bin_size)

    train_data, test_data, train_lengths, test_lengths = data_loader.split_train_test(test_size=config.test_size, random_state=config.random_state)

    hmm_model = RoomTransitionHMM(n_states=config.num_states, random_state=config.random_state, n_iter=config.n_iter)
    hmm_model.train(train_data, train_lengths)

    predictions = []
    actual = []
    for sequence in test_data:
        predicted_states = hmm_model.predict(np.array(sequence).reshape(-1, 1))
        predictions.extend(predicted_states)
        actual.extend(sequence.flatten())

    evaluator = PredictionEvaluator()
    # Updated to print only summaries
    evaluator.evaluate_accuracy(predictions, actual, verbose=False)
    evaluator.evaluate_confusion_matrix(predictions, actual, verbose=False)
    evaluator.evaluate_classification_report(predictions, actual, verbose=False)

if __name__ == "__main__":
    main()